package com.db.applepay.entity;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ApplePayDataExample {

	/**
	 * This field was generated by Abator for iBATIS. This field corresponds to the database table applepay
	 * @abatorgenerated  Mon Oct 16 11:23:17 CST 2017
	 */
	protected String orderByClause;
	/**
	 * This field was generated by Abator for iBATIS. This field corresponds to the database table applepay
	 * @abatorgenerated  Mon Oct 16 11:23:17 CST 2017
	 */
	protected List oredCriteria;

	/**
	 * This method was generated by Abator for iBATIS. This method corresponds to the database table applepay
	 * @abatorgenerated  Mon Oct 16 11:23:17 CST 2017
	 */
	public ApplePayDataExample()
	{
		oredCriteria = new ArrayList();
	}

	/**
	 * This method was generated by Abator for iBATIS. This method corresponds to the database table applepay
	 * @abatorgenerated  Mon Oct 16 11:23:17 CST 2017
	 */
	protected ApplePayDataExample(ApplePayDataExample example)
	{
		this.orderByClause = example.orderByClause;
		this.oredCriteria = example.oredCriteria;
	}

	/**
	 * This method was generated by Abator for iBATIS. This method corresponds to the database table applepay
	 * @abatorgenerated  Mon Oct 16 11:23:17 CST 2017
	 */
	public void setOrderByClause(String orderByClause)
	{
		this.orderByClause = orderByClause;
	}

	/**
	 * This method was generated by Abator for iBATIS. This method corresponds to the database table applepay
	 * @abatorgenerated  Mon Oct 16 11:23:17 CST 2017
	 */
	public String getOrderByClause()
	{
		return orderByClause;
	}

	/**
	 * This method was generated by Abator for iBATIS. This method corresponds to the database table applepay
	 * @abatorgenerated  Mon Oct 16 11:23:17 CST 2017
	 */
	public List getOredCriteria()
	{
		return oredCriteria;
	}

	/**
	 * This method was generated by Abator for iBATIS. This method corresponds to the database table applepay
	 * @abatorgenerated  Mon Oct 16 11:23:17 CST 2017
	 */
	public void or(Criteria criteria)
	{
		oredCriteria.add(criteria);
	}

	/**
	 * This method was generated by Abator for iBATIS. This method corresponds to the database table applepay
	 * @abatorgenerated  Mon Oct 16 11:23:17 CST 2017
	 */
	public Criteria createCriteria()
	{
		Criteria criteria = createCriteriaInternal();
		if (oredCriteria.size() == 0)
		{
			oredCriteria.add(criteria);
		}
		return criteria;
	}

	/**
	 * This method was generated by Abator for iBATIS. This method corresponds to the database table applepay
	 * @abatorgenerated  Mon Oct 16 11:23:17 CST 2017
	 */
	protected Criteria createCriteriaInternal()
	{
		Criteria criteria = new Criteria();
		return criteria;
	}

	/**
	 * This method was generated by Abator for iBATIS. This method corresponds to the database table applepay
	 * @abatorgenerated  Mon Oct 16 11:23:17 CST 2017
	 */
	public void clear()
	{
		oredCriteria.clear();
	}

	/**
	 * This class was generated by Abator for iBATIS. This class corresponds to the database table applepay
	 * @abatorgenerated  Mon Oct 16 11:23:17 CST 2017
	 */
	public static class Criteria
	{
		protected List criteriaWithoutValue;
		protected List criteriaWithSingleValue;
		protected List criteriaWithListValue;
		protected List criteriaWithBetweenValue;

		protected Criteria()
		{
			super();
			criteriaWithoutValue = new ArrayList();
			criteriaWithSingleValue = new ArrayList();
			criteriaWithListValue = new ArrayList();
			criteriaWithBetweenValue = new ArrayList();
		}

		public boolean isValid()
		{
			return criteriaWithoutValue.size() > 0
					|| criteriaWithSingleValue.size() > 0
					|| criteriaWithListValue.size() > 0
					|| criteriaWithBetweenValue.size() > 0;
		}

		public List getCriteriaWithoutValue()
		{
			return criteriaWithoutValue;
		}

		public List getCriteriaWithSingleValue()
		{
			return criteriaWithSingleValue;
		}

		public List getCriteriaWithListValue()
		{
			return criteriaWithListValue;
		}

		public List getCriteriaWithBetweenValue()
		{
			return criteriaWithBetweenValue;
		}

		protected void addCriterion(String condition)
		{
			if (condition == null)
			{
				throw new RuntimeException("Value for condition cannot be null");
			}
			criteriaWithoutValue.add(condition);
		}

		protected void addCriterion(String condition, Object value,
				String property)
		{
			if (value == null)
			{
				throw new RuntimeException("Value for " + property
						+ " cannot be null");
			}
			Map map = new HashMap();
			map.put("condition", condition);
			map.put("value", value);
			criteriaWithSingleValue.add(map);
		}

		protected void addCriterion(String condition, List values,
				String property)
		{
			if (values == null || values.size() == 0)
			{
				throw new RuntimeException("Value list for " + property
						+ " cannot be null or empty");
			}
			Map map = new HashMap();
			map.put("condition", condition);
			map.put("values", values);
			criteriaWithListValue.add(map);
		}

		protected void addCriterion(String condition, Object value1,
				Object value2, String property)
		{
			if (value1 == null || value2 == null)
			{
				throw new RuntimeException("Between values for " + property
						+ " cannot be null");
			}
			List list = new ArrayList();
			list.add(value1);
			list.add(value2);
			Map map = new HashMap();
			map.put("condition", condition);
			map.put("values", list);
			criteriaWithBetweenValue.add(map);
		}

		public Criteria andIdIsNull()
		{
			addCriterion("id is null");
			return this;
		}

		public Criteria andIdIsNotNull()
		{
			addCriterion("id is not null");
			return this;
		}

		public Criteria andIdEqualTo(String value)
		{
			addCriterion("id =", value, "id");
			return this;
		}

		public Criteria andIdNotEqualTo(String value)
		{
			addCriterion("id <>", value, "id");
			return this;
		}

		public Criteria andIdGreaterThan(String value)
		{
			addCriterion("id >", value, "id");
			return this;
		}

		public Criteria andIdGreaterThanOrEqualTo(String value)
		{
			addCriterion("id >=", value, "id");
			return this;
		}

		public Criteria andIdLessThan(String value)
		{
			addCriterion("id <", value, "id");
			return this;
		}

		public Criteria andIdLessThanOrEqualTo(String value)
		{
			addCriterion("id <=", value, "id");
			return this;
		}

		public Criteria andIdLike(String value)
		{
			addCriterion("id like", value, "id");
			return this;
		}

		public Criteria andIdNotLike(String value)
		{
			addCriterion("id not like", value, "id");
			return this;
		}

		public Criteria andIdIn(List values)
		{
			addCriterion("id in", values, "id");
			return this;
		}

		public Criteria andIdNotIn(List values)
		{
			addCriterion("id not in", values, "id");
			return this;
		}

		public Criteria andIdBetween(String value1, String value2)
		{
			addCriterion("id between", value1, value2, "id");
			return this;
		}

		public Criteria andIdNotBetween(String value1, String value2)
		{
			addCriterion("id not between", value1, value2, "id");
			return this;
		}

		public Criteria andTimeIsNull()
		{
			addCriterion("time is null");
			return this;
		}

		public Criteria andTimeIsNotNull()
		{
			addCriterion("time is not null");
			return this;
		}

		public Criteria andTimeEqualTo(Long value)
		{
			addCriterion("time =", value, "time");
			return this;
		}

		public Criteria andTimeNotEqualTo(Long value)
		{
			addCriterion("time <>", value, "time");
			return this;
		}

		public Criteria andTimeGreaterThan(Long value)
		{
			addCriterion("time >", value, "time");
			return this;
		}

		public Criteria andTimeGreaterThanOrEqualTo(Long value)
		{
			addCriterion("time >=", value, "time");
			return this;
		}

		public Criteria andTimeLessThan(Long value)
		{
			addCriterion("time <", value, "time");
			return this;
		}

		public Criteria andTimeLessThanOrEqualTo(Long value)
		{
			addCriterion("time <=", value, "time");
			return this;
		}

		public Criteria andTimeIn(List values)
		{
			addCriterion("time in", values, "time");
			return this;
		}

		public Criteria andTimeNotIn(List values)
		{
			addCriterion("time not in", values, "time");
			return this;
		}

		public Criteria andTimeBetween(Long value1, Long value2)
		{
			addCriterion("time between", value1, value2, "time");
			return this;
		}

		public Criteria andTimeNotBetween(Long value1, Long value2)
		{
			addCriterion("time not between", value1, value2, "time");
			return this;
		}

		public Criteria andBundleidIsNull()
		{
			addCriterion("bundleid is null");
			return this;
		}

		public Criteria andBundleidIsNotNull()
		{
			addCriterion("bundleid is not null");
			return this;
		}

		public Criteria andBundleidEqualTo(String value)
		{
			addCriterion("bundleid =", value, "bundleid");
			return this;
		}

		public Criteria andBundleidNotEqualTo(String value)
		{
			addCriterion("bundleid <>", value, "bundleid");
			return this;
		}

		public Criteria andBundleidGreaterThan(String value)
		{
			addCriterion("bundleid >", value, "bundleid");
			return this;
		}

		public Criteria andBundleidGreaterThanOrEqualTo(String value)
		{
			addCriterion("bundleid >=", value, "bundleid");
			return this;
		}

		public Criteria andBundleidLessThan(String value)
		{
			addCriterion("bundleid <", value, "bundleid");
			return this;
		}

		public Criteria andBundleidLessThanOrEqualTo(String value)
		{
			addCriterion("bundleid <=", value, "bundleid");
			return this;
		}

		public Criteria andBundleidLike(String value)
		{
			addCriterion("bundleid like", value, "bundleid");
			return this;
		}

		public Criteria andBundleidNotLike(String value)
		{
			addCriterion("bundleid not like", value, "bundleid");
			return this;
		}

		public Criteria andBundleidIn(List values)
		{
			addCriterion("bundleid in", values, "bundleid");
			return this;
		}

		public Criteria andBundleidNotIn(List values)
		{
			addCriterion("bundleid not in", values, "bundleid");
			return this;
		}

		public Criteria andBundleidBetween(String value1, String value2)
		{
			addCriterion("bundleid between", value1, value2, "bundleid");
			return this;
		}

		public Criteria andBundleidNotBetween(String value1, String value2)
		{
			addCriterion("bundleid not between", value1, value2, "bundleid");
			return this;
		}

		public Criteria andTotalfeeIsNull()
		{
			addCriterion("totalfee is null");
			return this;
		}

		public Criteria andTotalfeeIsNotNull()
		{
			addCriterion("totalfee is not null");
			return this;
		}

		public Criteria andTotalfeeEqualTo(Integer value)
		{
			addCriterion("totalfee =", value, "totalfee");
			return this;
		}

		public Criteria andTotalfeeNotEqualTo(Integer value)
		{
			addCriterion("totalfee <>", value, "totalfee");
			return this;
		}

		public Criteria andTotalfeeGreaterThan(Integer value)
		{
			addCriterion("totalfee >", value, "totalfee");
			return this;
		}

		public Criteria andTotalfeeGreaterThanOrEqualTo(Integer value)
		{
			addCriterion("totalfee >=", value, "totalfee");
			return this;
		}

		public Criteria andTotalfeeLessThan(Integer value)
		{
			addCriterion("totalfee <", value, "totalfee");
			return this;
		}

		public Criteria andTotalfeeLessThanOrEqualTo(Integer value)
		{
			addCriterion("totalfee <=", value, "totalfee");
			return this;
		}

		public Criteria andTotalfeeIn(List values)
		{
			addCriterion("totalfee in", values, "totalfee");
			return this;
		}

		public Criteria andTotalfeeNotIn(List values)
		{
			addCriterion("totalfee not in", values, "totalfee");
			return this;
		}

		public Criteria andTotalfeeBetween(Integer value1, Integer value2)
		{
			addCriterion("totalfee between", value1, value2, "totalfee");
			return this;
		}

		public Criteria andTotalfeeNotBetween(Integer value1, Integer value2)
		{
			addCriterion("totalfee not between", value1, value2, "totalfee");
			return this;
		}

		public Criteria andStatusIsNull()
		{
			addCriterion("status is null");
			return this;
		}

		public Criteria andStatusIsNotNull()
		{
			addCriterion("status is not null");
			return this;
		}

		public Criteria andStatusEqualTo(String value)
		{
			addCriterion("status =", value, "status");
			return this;
		}

		public Criteria andStatusNotEqualTo(String value)
		{
			addCriterion("status <>", value, "status");
			return this;
		}

		public Criteria andStatusGreaterThan(String value)
		{
			addCriterion("status >", value, "status");
			return this;
		}

		public Criteria andStatusGreaterThanOrEqualTo(String value)
		{
			addCriterion("status >=", value, "status");
			return this;
		}

		public Criteria andStatusLessThan(String value)
		{
			addCriterion("status <", value, "status");
			return this;
		}

		public Criteria andStatusLessThanOrEqualTo(String value)
		{
			addCriterion("status <=", value, "status");
			return this;
		}

		public Criteria andStatusLike(String value)
		{
			addCriterion("status like", value, "status");
			return this;
		}

		public Criteria andStatusNotLike(String value)
		{
			addCriterion("status not like", value, "status");
			return this;
		}

		public Criteria andStatusIn(List values)
		{
			addCriterion("status in", values, "status");
			return this;
		}

		public Criteria andStatusNotIn(List values)
		{
			addCriterion("status not in", values, "status");
			return this;
		}

		public Criteria andStatusBetween(String value1, String value2)
		{
			addCriterion("status between", value1, value2, "status");
			return this;
		}

		public Criteria andStatusNotBetween(String value1, String value2)
		{
			addCriterion("status not between", value1, value2, "status");
			return this;
		}
	}
}